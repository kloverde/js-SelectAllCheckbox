/*
 * SelectAllCheckbox v1.0
 * https://www.github.com/kloverde/js-SelectAllCheckbox
 *
 * Donations:  https://paypal.me/KurtisLoVerde/5
 *
 * Copyright (c) 2020, Kurtis LoVerde
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. Neither the name of the copyright holder nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

class CheckboxGroup{constructor(selectAllId,groupName,onChangeCallback){const selectAllCheckbox=document.getElementById(selectAllId);this.name=groupName;selectAllCheckbox.addEventListener("click",box=>{const allCheckboxes=this.checkboxElements;const enabledCheckboxes=allCheckboxes.filter(box=>!box.disabled);const eligibleForChecking=enabledCheckboxes.filter(box=>!box.checked);const newCheckedProp=eligibleForChecking.length>0;const changedBoxes=[];let howManyChecked=0;enabledCheckboxes.forEach(box=>{if(box.checked!==newCheckedProp){box.checked=newCheckedProp;changedBoxes.push(box)}});allCheckboxes.forEach(box=>{if(box.checked){howManyChecked+=1}});let newState=null;if(howManyChecked===0){newState=CheckboxGroup.GROUP_STATE_NONE}else if(howManyChecked<allCheckboxes.length){newState=CheckboxGroup.GROUP_STATE_SOME}else if(howManyChecked===allCheckboxes.length){newState=CheckboxGroup.GROUP_STATE_ALL}else{throw "Impossible result:  more checkboxes checked than actually exist"}updateSelectAllCheckboxState(this,newState);if(changedBoxes.length>0&&typeof onChangeCallback==="function"){onChangeCallback(changedBoxes,newState)}});this.checkboxElements.forEach(function(box){box.addEventListener("change",event=>{let someChecked=false,someNotChecked=false;let status=CheckboxGroup.GROUP_STATE_NONE;this.checkboxElements.forEach(b=>{if(b.checked){someChecked=true}else{someNotChecked=true}});if(someChecked&&someNotChecked){status=CheckboxGroup.GROUP_STATE_SOME}else if(someChecked&&!someNotChecked){status=CheckboxGroup.GROUP_STATE_ALL}else if(!someChecked){status=CheckboxGroup.GROUP_STATE_NONE}updateSelectAllCheckboxState(this,status);if(typeof onChangeCallback==="function"){let changedBoxes=[box];onChangeCallback(changedBoxes,status)}})},this);setSelectAllCheckboxInitialState(this);function setSelectAllCheckboxInitialState(instance){let checkboxes=instance.checkboxElements;let checkedCount=0;let state=null;checkboxes.forEach(function(box){if(box.checked){checkedCount+=1}if(checkedCount===0){state=CheckboxGroup.GROUP_STATE_NONE}else if(checkedCount<checkboxes.length){state=CheckboxGroup.GROUP_STATE_SOME}else if(checkedCount===checkboxes.length){state=CheckboxGroup.GROUP_STATE_ALL}else{throw "Impossible result:  more checkboxes checked than actually exist"}updateSelectAllCheckboxState(this,state)},instance)}function updateSelectAllCheckboxState(instance,state){if(state===CheckboxGroup.GROUP_STATE_SOME){selectAllCheckbox.checked=false;selectAllCheckbox.indeterminate=true}else if(state===CheckboxGroup.GROUP_STATE_ALL){selectAllCheckbox.indeterminate=false;selectAllCheckbox.checked=true}else if(state===CheckboxGroup.GROUP_STATE_NONE){selectAllCheckbox.indeterminate=false;selectAllCheckbox.checked=false}instance.state=state}}get checkboxElements(){return Array.from(document.querySelectorAll("input[type='checkbox'][name='"+this.name+"']"))}}Object.defineProperty(CheckboxGroup,"GROUP_STATE_NONE",{value:"none",writable:false});Object.defineProperty(CheckboxGroup,"GROUP_STATE_SOME",{value:"some",writable:false});Object.defineProperty(CheckboxGroup,"GROUP_STATE_ALL",{value:"all",writable:false});
